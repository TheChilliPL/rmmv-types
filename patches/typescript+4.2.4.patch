diff --git a/node_modules/typescript/lib/lib.dom.d.ts b/node_modules/typescript/lib/lib.dom.d.ts
index 960a680..90337d3 100644
--- a/node_modules/typescript/lib/lib.dom.d.ts
+++ b/node_modules/typescript/lib/lib.dom.d.ts
@@ -1909,7 +1909,7 @@ interface TransitionEventInit extends EventInit {
 
 interface UIEventInit extends EventInit {
     detail?: number;
-    view?: Window | null;
+    view?: DomWindow | null;
 }
 
 interface ULongRange {
@@ -9957,7 +9957,7 @@ interface MSGestureEvent extends UIEvent {
     readonly velocityExpansion: number;
     readonly velocityX: number;
     readonly velocityY: number;
-    initGestureEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, offsetXArg: number, offsetYArg: number, translationXArg: number, translationYArg: number, scaleArg: number, expansionArg: number, rotationArg: number, velocityXArg: number, velocityYArg: number, velocityExpansionArg: number, velocityAngularArg: number, hwTimestampArg: number): void;
+    initGestureEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: DomWindow, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, offsetXArg: number, offsetYArg: number, translationXArg: number, translationYArg: number, scaleArg: number, expansionArg: number, rotationArg: number, velocityXArg: number, velocityYArg: number, velocityExpansionArg: number, velocityAngularArg: number, hwTimestampArg: number): void;
     readonly MSGESTURE_FLAG_BEGIN: number;
     readonly MSGESTURE_FLAG_CANCEL: number;
     readonly MSGESTURE_FLAG_END: number;
@@ -10104,7 +10104,7 @@ interface MSPointerEvent extends MouseEvent {
     readonly width: number;
     getCurrentPoint(element: Element): void;
     getIntermediatePoints(element: Element): void;
-    initPointerEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, ctrlKeyArg: boolean, altKeyArg: boolean, shiftKeyArg: boolean, metaKeyArg: boolean, buttonArg: number, relatedTargetArg: EventTarget, offsetXArg: number, offsetYArg: number, widthArg: number, heightArg: number, pressure: number, rotation: number, tiltX: number, tiltY: number, pointerIdArg: number, pointerType: any, hwTimestampArg: number, isPrimary: boolean): void;
+    initPointerEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: DomWindow, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, ctrlKeyArg: boolean, altKeyArg: boolean, shiftKeyArg: boolean, metaKeyArg: boolean, buttonArg: number, relatedTargetArg: EventTarget, offsetXArg: number, offsetYArg: number, widthArg: number, heightArg: number, pressure: number, rotation: number, tiltX: number, tiltY: number, pointerIdArg: number, pointerType: any, hwTimestampArg: number, isPrimary: boolean): void;
 }
 
 declare var MSPointerEvent: {
@@ -10630,7 +10630,7 @@ interface MouseEvent extends UIEvent {
     readonly x: number;
     readonly y: number;
     getModifierState(keyArg: string): boolean;
-    initMouseEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, ctrlKeyArg: boolean, altKeyArg: boolean, shiftKeyArg: boolean, metaKeyArg: boolean, buttonArg: number, relatedTargetArg: EventTarget | null): void;
+    initMouseEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: DomWindow, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, ctrlKeyArg: boolean, altKeyArg: boolean, shiftKeyArg: boolean, metaKeyArg: boolean, buttonArg: number, relatedTargetArg: EventTarget | null): void;
 }
 
 declare var MouseEvent: {
@@ -10837,7 +10837,7 @@ interface NavigatorPlugins {
 }
 
 interface NavigatorStorage {
-    readonly storage: StorageManager;
+    readonly storage: DomStorageManager;
 }
 
 /** Node is an interface from which a number of DOM API object types inherit. It allows those types to be treated similarly; for example, inheriting the same set of methods, or being tested in the same way. */
@@ -15455,15 +15455,15 @@ declare var StorageEvent: {
     new(type: string, eventInitDict?: StorageEventInit): StorageEvent;
 };
 
-interface StorageManager {
+interface DomStorageManager {
     estimate(): Promise<StorageEstimate>;
     persist(): Promise<boolean>;
     persisted(): Promise<boolean>;
 }
 
-declare var StorageManager: {
-    prototype: StorageManager;
-    new(): StorageManager;
+declare var DomStorageManager: {
+    prototype: DomStorageManager;
+    new(): DomStorageManager;
 };
 
 interface StyleMedia {
@@ -15644,7 +15644,7 @@ declare var TextEncoderStream: {
 
 interface TextEvent extends UIEvent {
     readonly data: string;
-    initTextEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, dataArg: string, inputMethod: number, locale: string): void;
+    initTextEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: DomWindow, dataArg: string, inputMethod: number, locale: string): void;
     readonly DOM_INPUT_METHOD_DROP: number;
     readonly DOM_INPUT_METHOD_HANDWRITING: number;
     readonly DOM_INPUT_METHOD_IME: number;
@@ -16032,7 +16032,7 @@ declare var TreeWalker: {
 /** Simple user interface events. */
 interface UIEvent extends Event {
     readonly detail: number;
-    readonly view: Window | null;
+    readonly view: DomWindow | null;
     /** @deprecated */
     readonly which: number;
 }
@@ -18515,9 +18515,9 @@ interface WindowEventMap extends GlobalEventHandlersEventMap, WindowEventHandler
     "play": Event;
     "playing": Event;
     "popstate": PopStateEvent;
-    "progress": ProgressEvent<Window>;
+    "progress": ProgressEvent<DomWindow>;
     "ratechange": Event;
-    "readystatechange": ProgressEvent<Window>;
+    "readystatechange": ProgressEvent<DomWindow>;
     "reset": Event;
     "resize": UIEvent;
     "scroll": Event;
@@ -18544,7 +18544,7 @@ interface WindowEventMap extends GlobalEventHandlersEventMap, WindowEventHandler
 }
 
 /** A window containing a DOM document; the document property points to the DOM document loaded in that window. */
-interface Window extends EventTarget, AnimationFrameProvider, GlobalEventHandlers, WindowEventHandlers, WindowLocalStorage, WindowOrWorkerGlobalScope, WindowSessionStorage {
+interface DomWindow extends EventTarget, AnimationFrameProvider, GlobalEventHandlers, WindowEventHandlers, WindowLocalStorage, WindowOrWorkerGlobalScope, WindowSessionStorage {
     readonly applicationCache: ApplicationCache;
     readonly clientInformation: Navigator;
     readonly closed: boolean;
@@ -18558,7 +18558,7 @@ interface Window extends EventTarget, AnimationFrameProvider, GlobalEventHandler
     /** @deprecated */
     readonly external: External;
     readonly frameElement: Element | null;
-    readonly frames: Window;
+    readonly frames: DomWindow;
     readonly history: History;
     readonly innerHeight: number;
     readonly innerWidth: number;
@@ -18570,41 +18570,41 @@ interface Window extends EventTarget, AnimationFrameProvider, GlobalEventHandler
     name: string;
     readonly navigator: Navigator;
     offscreenBuffering: string | boolean;
-    oncompassneedscalibration: ((this: Window, ev: Event) => any) | null;
-    ondevicelight: ((this: Window, ev: DeviceLightEvent) => any) | null;
-    ondevicemotion: ((this: Window, ev: DeviceMotionEvent) => any) | null;
-    ondeviceorientation: ((this: Window, ev: DeviceOrientationEvent) => any) | null;
-    ondeviceorientationabsolute: ((this: Window, ev: DeviceOrientationEvent) => any) | null;
-    ongamepadconnected: ((this: Window, ev: GamepadEvent) => any) | null;
-    ongamepaddisconnected: ((this: Window, ev: GamepadEvent) => any) | null;
-    onmousewheel: ((this: Window, ev: Event) => any) | null;
-    onmsgesturechange: ((this: Window, ev: Event) => any) | null;
-    onmsgesturedoubletap: ((this: Window, ev: Event) => any) | null;
-    onmsgestureend: ((this: Window, ev: Event) => any) | null;
-    onmsgesturehold: ((this: Window, ev: Event) => any) | null;
-    onmsgesturestart: ((this: Window, ev: Event) => any) | null;
-    onmsgesturetap: ((this: Window, ev: Event) => any) | null;
-    onmsinertiastart: ((this: Window, ev: Event) => any) | null;
-    onmspointercancel: ((this: Window, ev: Event) => any) | null;
-    onmspointerdown: ((this: Window, ev: Event) => any) | null;
-    onmspointerenter: ((this: Window, ev: Event) => any) | null;
-    onmspointerleave: ((this: Window, ev: Event) => any) | null;
-    onmspointermove: ((this: Window, ev: Event) => any) | null;
-    onmspointerout: ((this: Window, ev: Event) => any) | null;
-    onmspointerover: ((this: Window, ev: Event) => any) | null;
-    onmspointerup: ((this: Window, ev: Event) => any) | null;
-    /** @deprecated */
-    onorientationchange: ((this: Window, ev: Event) => any) | null;
-    onreadystatechange: ((this: Window, ev: ProgressEvent<Window>) => any) | null;
-    onvrdisplayactivate: ((this: Window, ev: Event) => any) | null;
-    onvrdisplayblur: ((this: Window, ev: Event) => any) | null;
-    onvrdisplayconnect: ((this: Window, ev: Event) => any) | null;
-    onvrdisplaydeactivate: ((this: Window, ev: Event) => any) | null;
-    onvrdisplaydisconnect: ((this: Window, ev: Event) => any) | null;
-    onvrdisplayfocus: ((this: Window, ev: Event) => any) | null;
-    onvrdisplaypointerrestricted: ((this: Window, ev: Event) => any) | null;
-    onvrdisplaypointerunrestricted: ((this: Window, ev: Event) => any) | null;
-    onvrdisplaypresentchange: ((this: Window, ev: Event) => any) | null;
+    oncompassneedscalibration: ((this: DomWindow, ev: Event) => any) | null;
+    ondevicelight: ((this: DomWindow, ev: DeviceLightEvent) => any) | null;
+    ondevicemotion: ((this: DomWindow, ev: DeviceMotionEvent) => any) | null;
+    ondeviceorientation: ((this: DomWindow, ev: DeviceOrientationEvent) => any) | null;
+    ondeviceorientationabsolute: ((this: DomWindow, ev: DeviceOrientationEvent) => any) | null;
+    ongamepadconnected: ((this: DomWindow, ev: GamepadEvent) => any) | null;
+    ongamepaddisconnected: ((this: DomWindow, ev: GamepadEvent) => any) | null;
+    onmousewheel: ((this: DomWindow, ev: Event) => any) | null;
+    onmsgesturechange: ((this: DomWindow, ev: Event) => any) | null;
+    onmsgesturedoubletap: ((this: DomWindow, ev: Event) => any) | null;
+    onmsgestureend: ((this: DomWindow, ev: Event) => any) | null;
+    onmsgesturehold: ((this: DomWindow, ev: Event) => any) | null;
+    onmsgesturestart: ((this: DomWindow, ev: Event) => any) | null;
+    onmsgesturetap: ((this: DomWindow, ev: Event) => any) | null;
+    onmsinertiastart: ((this: DomWindow, ev: Event) => any) | null;
+    onmspointercancel: ((this: DomWindow, ev: Event) => any) | null;
+    onmspointerdown: ((this: DomWindow, ev: Event) => any) | null;
+    onmspointerenter: ((this: DomWindow, ev: Event) => any) | null;
+    onmspointerleave: ((this: DomWindow, ev: Event) => any) | null;
+    onmspointermove: ((this: DomWindow, ev: Event) => any) | null;
+    onmspointerout: ((this: DomWindow, ev: Event) => any) | null;
+    onmspointerover: ((this: DomWindow, ev: Event) => any) | null;
+    onmspointerup: ((this: DomWindow, ev: Event) => any) | null;
+    /** @deprecated */
+    onorientationchange: ((this: DomWindow, ev: Event) => any) | null;
+    onreadystatechange: ((this: DomWindow, ev: ProgressEvent<DomWindow>) => any) | null;
+    onvrdisplayactivate: ((this: DomWindow, ev: Event) => any) | null;
+    onvrdisplayblur: ((this: DomWindow, ev: Event) => any) | null;
+    onvrdisplayconnect: ((this: DomWindow, ev: Event) => any) | null;
+    onvrdisplaydeactivate: ((this: DomWindow, ev: Event) => any) | null;
+    onvrdisplaydisconnect: ((this: DomWindow, ev: Event) => any) | null;
+    onvrdisplayfocus: ((this: DomWindow, ev: Event) => any) | null;
+    onvrdisplaypointerrestricted: ((this: DomWindow, ev: Event) => any) | null;
+    onvrdisplaypointerunrestricted: ((this: DomWindow, ev: Event) => any) | null;
+    onvrdisplaypresentchange: ((this: DomWindow, ev: Event) => any) | null;
     opener: any;
     /** @deprecated */
     readonly orientation: string | number;
@@ -18612,7 +18612,7 @@ interface Window extends EventTarget, AnimationFrameProvider, GlobalEventHandler
     readonly outerWidth: number;
     readonly pageXOffset: number;
     readonly pageYOffset: number;
-    readonly parent: Window;
+    readonly parent: DomWindow;
     readonly personalbar: BarProp;
     readonly screen: Screen;
     readonly screenLeft: number;
@@ -18622,15 +18622,15 @@ interface Window extends EventTarget, AnimationFrameProvider, GlobalEventHandler
     readonly scrollX: number;
     readonly scrollY: number;
     readonly scrollbars: BarProp;
-    readonly self: Window & typeof globalThis;
+    readonly self: DomWindow & typeof globalThis;
     readonly speechSynthesis: SpeechSynthesis;
     status: string;
     readonly statusbar: BarProp;
     readonly styleMedia: StyleMedia;
     readonly toolbar: BarProp;
-    readonly top: Window;
+    readonly top: DomWindow;
     readonly visualViewport: VisualViewport;
-    readonly window: Window & typeof globalThis;
+    readonly window: DomWindow & typeof globalThis;
     alert(message?: any): void;
     blur(): void;
     /** @deprecated */
@@ -18646,7 +18646,7 @@ interface Window extends EventTarget, AnimationFrameProvider, GlobalEventHandler
     moveBy(x: number, y: number): void;
     moveTo(x: number, y: number): void;
     msWriteProfilerMark(profilerMarkName: string): void;
-    open(url?: string, target?: string, features?: string, replace?: boolean): Window | null;
+    open(url?: string, target?: string, features?: string, replace?: boolean): DomWindow | null;
     postMessage(message: any, targetOrigin: string, transfer?: Transferable[]): void;
     print(): void;
     prompt(message?: string, _default?: string): string | null;
@@ -18665,16 +18665,16 @@ interface Window extends EventTarget, AnimationFrameProvider, GlobalEventHandler
     webkitConvertPointFromNodeToPage(node: Node, pt: WebKitPoint): WebKitPoint;
     webkitConvertPointFromPageToNode(node: Node, pt: WebKitPoint): WebKitPoint;
     webkitRequestAnimationFrame(callback: FrameRequestCallback): number;
-    addEventListener<K extends keyof WindowEventMap>(type: K, listener: (this: Window, ev: WindowEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
+    addEventListener<K extends keyof WindowEventMap>(type: K, listener: (this: DomWindow, ev: WindowEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
     addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
-    removeEventListener<K extends keyof WindowEventMap>(type: K, listener: (this: Window, ev: WindowEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
+    removeEventListener<K extends keyof WindowEventMap>(type: K, listener: (this: DomWindow, ev: WindowEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
     removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
-    [index: number]: Window;
+    [index: number]: DomWindow;
 }
 
-declare var Window: {
-    prototype: Window;
-    new(): Window;
+declare var DomWindow: {
+    prototype: DomWindow;
+    new(): DomWindow;
 };
 
 interface WindowEventHandlersEventMap {
@@ -19607,7 +19607,7 @@ declare var event: Event | undefined;
 /** @deprecated */
 declare var external: External;
 declare var frameElement: Element | null;
-declare var frames: Window;
+declare var frames: DomWindow;
 declare var history: History;
 declare var innerHeight: number;
 declare var innerWidth: number;
@@ -19620,41 +19620,41 @@ declare var msContentScript: ExtensionScriptApis;
 declare const name: void;
 declare var navigator: Navigator;
 declare var offscreenBuffering: string | boolean;
-declare var oncompassneedscalibration: ((this: Window, ev: Event) => any) | null;
-declare var ondevicelight: ((this: Window, ev: DeviceLightEvent) => any) | null;
-declare var ondevicemotion: ((this: Window, ev: DeviceMotionEvent) => any) | null;
-declare var ondeviceorientation: ((this: Window, ev: DeviceOrientationEvent) => any) | null;
-declare var ondeviceorientationabsolute: ((this: Window, ev: DeviceOrientationEvent) => any) | null;
-declare var ongamepadconnected: ((this: Window, ev: GamepadEvent) => any) | null;
-declare var ongamepaddisconnected: ((this: Window, ev: GamepadEvent) => any) | null;
-declare var onmousewheel: ((this: Window, ev: Event) => any) | null;
-declare var onmsgesturechange: ((this: Window, ev: Event) => any) | null;
-declare var onmsgesturedoubletap: ((this: Window, ev: Event) => any) | null;
-declare var onmsgestureend: ((this: Window, ev: Event) => any) | null;
-declare var onmsgesturehold: ((this: Window, ev: Event) => any) | null;
-declare var onmsgesturestart: ((this: Window, ev: Event) => any) | null;
-declare var onmsgesturetap: ((this: Window, ev: Event) => any) | null;
-declare var onmsinertiastart: ((this: Window, ev: Event) => any) | null;
-declare var onmspointercancel: ((this: Window, ev: Event) => any) | null;
-declare var onmspointerdown: ((this: Window, ev: Event) => any) | null;
-declare var onmspointerenter: ((this: Window, ev: Event) => any) | null;
-declare var onmspointerleave: ((this: Window, ev: Event) => any) | null;
-declare var onmspointermove: ((this: Window, ev: Event) => any) | null;
-declare var onmspointerout: ((this: Window, ev: Event) => any) | null;
-declare var onmspointerover: ((this: Window, ev: Event) => any) | null;
-declare var onmspointerup: ((this: Window, ev: Event) => any) | null;
+declare var oncompassneedscalibration: ((this: DomWindow, ev: Event) => any) | null;
+declare var ondevicelight: ((this: DomWindow, ev: DeviceLightEvent) => any) | null;
+declare var ondevicemotion: ((this: DomWindow, ev: DeviceMotionEvent) => any) | null;
+declare var ondeviceorientation: ((this: DomWindow, ev: DeviceOrientationEvent) => any) | null;
+declare var ondeviceorientationabsolute: ((this: DomWindow, ev: DeviceOrientationEvent) => any) | null;
+declare var ongamepadconnected: ((this: DomWindow, ev: GamepadEvent) => any) | null;
+declare var ongamepaddisconnected: ((this: DomWindow, ev: GamepadEvent) => any) | null;
+declare var onmousewheel: ((this: DomWindow, ev: Event) => any) | null;
+declare var onmsgesturechange: ((this: DomWindow, ev: Event) => any) | null;
+declare var onmsgesturedoubletap: ((this: DomWindow, ev: Event) => any) | null;
+declare var onmsgestureend: ((this: DomWindow, ev: Event) => any) | null;
+declare var onmsgesturehold: ((this: DomWindow, ev: Event) => any) | null;
+declare var onmsgesturestart: ((this: DomWindow, ev: Event) => any) | null;
+declare var onmsgesturetap: ((this: DomWindow, ev: Event) => any) | null;
+declare var onmsinertiastart: ((this: DomWindow, ev: Event) => any) | null;
+declare var onmspointercancel: ((this: DomWindow, ev: Event) => any) | null;
+declare var onmspointerdown: ((this: DomWindow, ev: Event) => any) | null;
+declare var onmspointerenter: ((this: DomWindow, ev: Event) => any) | null;
+declare var onmspointerleave: ((this: DomWindow, ev: Event) => any) | null;
+declare var onmspointermove: ((this: DomWindow, ev: Event) => any) | null;
+declare var onmspointerout: ((this: DomWindow, ev: Event) => any) | null;
+declare var onmspointerover: ((this: DomWindow, ev: Event) => any) | null;
+declare var onmspointerup: ((this: DomWindow, ev: Event) => any) | null;
 /** @deprecated */
-declare var onorientationchange: ((this: Window, ev: Event) => any) | null;
-declare var onreadystatechange: ((this: Window, ev: ProgressEvent<Window>) => any) | null;
-declare var onvrdisplayactivate: ((this: Window, ev: Event) => any) | null;
-declare var onvrdisplayblur: ((this: Window, ev: Event) => any) | null;
-declare var onvrdisplayconnect: ((this: Window, ev: Event) => any) | null;
-declare var onvrdisplaydeactivate: ((this: Window, ev: Event) => any) | null;
-declare var onvrdisplaydisconnect: ((this: Window, ev: Event) => any) | null;
-declare var onvrdisplayfocus: ((this: Window, ev: Event) => any) | null;
-declare var onvrdisplaypointerrestricted: ((this: Window, ev: Event) => any) | null;
-declare var onvrdisplaypointerunrestricted: ((this: Window, ev: Event) => any) | null;
-declare var onvrdisplaypresentchange: ((this: Window, ev: Event) => any) | null;
+declare var onorientationchange: ((this: DomWindow, ev: Event) => any) | null;
+declare var onreadystatechange: ((this: DomWindow, ev: ProgressEvent<DomWindow>) => any) | null;
+declare var onvrdisplayactivate: ((this: DomWindow, ev: Event) => any) | null;
+declare var onvrdisplayblur: ((this: DomWindow, ev: Event) => any) | null;
+declare var onvrdisplayconnect: ((this: DomWindow, ev: Event) => any) | null;
+declare var onvrdisplaydeactivate: ((this: DomWindow, ev: Event) => any) | null;
+declare var onvrdisplaydisconnect: ((this: DomWindow, ev: Event) => any) | null;
+declare var onvrdisplayfocus: ((this: DomWindow, ev: Event) => any) | null;
+declare var onvrdisplaypointerrestricted: ((this: DomWindow, ev: Event) => any) | null;
+declare var onvrdisplaypointerunrestricted: ((this: DomWindow, ev: Event) => any) | null;
+declare var onvrdisplaypresentchange: ((this: DomWindow, ev: Event) => any) | null;
 declare var opener: any;
 /** @deprecated */
 declare var orientation: string | number;
@@ -19662,7 +19662,7 @@ declare var outerHeight: number;
 declare var outerWidth: number;
 declare var pageXOffset: number;
 declare var pageYOffset: number;
-declare var parent: Window;
+declare var parent: DomWindow;
 declare var personalbar: BarProp;
 declare var screen: Screen;
 declare var screenLeft: number;
@@ -19672,15 +19672,15 @@ declare var screenY: number;
 declare var scrollX: number;
 declare var scrollY: number;
 declare var scrollbars: BarProp;
-declare var self: Window & typeof globalThis;
+declare var self: DomWindow & typeof globalThis;
 declare var speechSynthesis: SpeechSynthesis;
 declare var status: string;
 declare var statusbar: BarProp;
 declare var styleMedia: StyleMedia;
 declare var toolbar: BarProp;
-declare var top: Window;
+declare var top: DomWindow;
 declare var visualViewport: VisualViewport;
-declare var window: Window & typeof globalThis;
+declare var window: DomWindow & typeof globalThis;
 declare function alert(message?: any): void;
 declare function blur(): void;
 /** @deprecated */
@@ -19696,7 +19696,7 @@ declare function matchMedia(query: string): MediaQueryList;
 declare function moveBy(x: number, y: number): void;
 declare function moveTo(x: number, y: number): void;
 declare function msWriteProfilerMark(profilerMarkName: string): void;
-declare function open(url?: string, target?: string, features?: string, replace?: boolean): Window | null;
+declare function open(url?: string, target?: string, features?: string, replace?: boolean): DomWindow | null;
 declare function postMessage(message: any, targetOrigin: string, transfer?: Transferable[]): void;
 declare function print(): void;
 declare function prompt(message?: string, _default?: string): string | null;
@@ -19726,93 +19726,93 @@ declare var localStorage: Storage;
  * Fires when the user aborts the download.
  * @param ev The event.
  */
-declare var onabort: ((this: Window, ev: UIEvent) => any) | null;
-declare var onanimationcancel: ((this: Window, ev: AnimationEvent) => any) | null;
-declare var onanimationend: ((this: Window, ev: AnimationEvent) => any) | null;
-declare var onanimationiteration: ((this: Window, ev: AnimationEvent) => any) | null;
-declare var onanimationstart: ((this: Window, ev: AnimationEvent) => any) | null;
-declare var onauxclick: ((this: Window, ev: MouseEvent) => any) | null;
+declare var onabort: ((this: DomWindow, ev: UIEvent) => any) | null;
+declare var onanimationcancel: ((this: DomWindow, ev: AnimationEvent) => any) | null;
+declare var onanimationend: ((this: DomWindow, ev: AnimationEvent) => any) | null;
+declare var onanimationiteration: ((this: DomWindow, ev: AnimationEvent) => any) | null;
+declare var onanimationstart: ((this: DomWindow, ev: AnimationEvent) => any) | null;
+declare var onauxclick: ((this: DomWindow, ev: MouseEvent) => any) | null;
 /**
  * Fires when the object loses the input focus.
  * @param ev The focus event.
  */
-declare var onblur: ((this: Window, ev: FocusEvent) => any) | null;
-declare var oncancel: ((this: Window, ev: Event) => any) | null;
+declare var onblur: ((this: DomWindow, ev: FocusEvent) => any) | null;
+declare var oncancel: ((this: DomWindow, ev: Event) => any) | null;
 /**
  * Occurs when playback is possible, but would require further buffering.
  * @param ev The event.
  */
-declare var oncanplay: ((this: Window, ev: Event) => any) | null;
-declare var oncanplaythrough: ((this: Window, ev: Event) => any) | null;
+declare var oncanplay: ((this: DomWindow, ev: Event) => any) | null;
+declare var oncanplaythrough: ((this: DomWindow, ev: Event) => any) | null;
 /**
  * Fires when the contents of the object or selection have changed.
  * @param ev The event.
  */
-declare var onchange: ((this: Window, ev: Event) => any) | null;
+declare var onchange: ((this: DomWindow, ev: Event) => any) | null;
 /**
  * Fires when the user clicks the left mouse button on the object
  * @param ev The mouse event.
  */
-declare var onclick: ((this: Window, ev: MouseEvent) => any) | null;
-declare var onclose: ((this: Window, ev: Event) => any) | null;
+declare var onclick: ((this: DomWindow, ev: MouseEvent) => any) | null;
+declare var onclose: ((this: DomWindow, ev: Event) => any) | null;
 /**
  * Fires when the user clicks the right mouse button in the client area, opening the context menu.
  * @param ev The mouse event.
  */
-declare var oncontextmenu: ((this: Window, ev: MouseEvent) => any) | null;
-declare var oncuechange: ((this: Window, ev: Event) => any) | null;
+declare var oncontextmenu: ((this: DomWindow, ev: MouseEvent) => any) | null;
+declare var oncuechange: ((this: DomWindow, ev: Event) => any) | null;
 /**
  * Fires when the user double-clicks the object.
  * @param ev The mouse event.
  */
-declare var ondblclick: ((this: Window, ev: MouseEvent) => any) | null;
+declare var ondblclick: ((this: DomWindow, ev: MouseEvent) => any) | null;
 /**
  * Fires on the source object continuously during a drag operation.
  * @param ev The event.
  */
-declare var ondrag: ((this: Window, ev: DragEvent) => any) | null;
+declare var ondrag: ((this: DomWindow, ev: DragEvent) => any) | null;
 /**
  * Fires on the source object when the user releases the mouse at the close of a drag operation.
  * @param ev The event.
  */
-declare var ondragend: ((this: Window, ev: DragEvent) => any) | null;
+declare var ondragend: ((this: DomWindow, ev: DragEvent) => any) | null;
 /**
  * Fires on the target element when the user drags the object to a valid drop target.
  * @param ev The drag event.
  */
-declare var ondragenter: ((this: Window, ev: DragEvent) => any) | null;
-declare var ondragexit: ((this: Window, ev: Event) => any) | null;
+declare var ondragenter: ((this: DomWindow, ev: DragEvent) => any) | null;
+declare var ondragexit: ((this: DomWindow, ev: Event) => any) | null;
 /**
  * Fires on the target object when the user moves the mouse out of a valid drop target during a drag operation.
  * @param ev The drag event.
  */
-declare var ondragleave: ((this: Window, ev: DragEvent) => any) | null;
+declare var ondragleave: ((this: DomWindow, ev: DragEvent) => any) | null;
 /**
  * Fires on the target element continuously while the user drags the object over a valid drop target.
  * @param ev The event.
  */
-declare var ondragover: ((this: Window, ev: DragEvent) => any) | null;
+declare var ondragover: ((this: DomWindow, ev: DragEvent) => any) | null;
 /**
  * Fires on the source object when the user starts to drag a text selection or selected object.
  * @param ev The event.
  */
-declare var ondragstart: ((this: Window, ev: DragEvent) => any) | null;
-declare var ondrop: ((this: Window, ev: DragEvent) => any) | null;
+declare var ondragstart: ((this: DomWindow, ev: DragEvent) => any) | null;
+declare var ondrop: ((this: DomWindow, ev: DragEvent) => any) | null;
 /**
  * Occurs when the duration attribute is updated.
  * @param ev The event.
  */
-declare var ondurationchange: ((this: Window, ev: Event) => any) | null;
+declare var ondurationchange: ((this: DomWindow, ev: Event) => any) | null;
 /**
  * Occurs when the media element is reset to its initial state.
  * @param ev The event.
  */
-declare var onemptied: ((this: Window, ev: Event) => any) | null;
+declare var onemptied: ((this: DomWindow, ev: Event) => any) | null;
 /**
  * Occurs when the end of playback is reached.
  * @param ev The event
  */
-declare var onended: ((this: Window, ev: Event) => any) | null;
+declare var onended: ((this: DomWindow, ev: Event) => any) | null;
 /**
  * Fires when an error occurs during object loading.
  * @param ev The event.
@@ -19822,171 +19822,171 @@ declare var onerror: OnErrorEventHandler;
  * Fires when the object receives focus.
  * @param ev The event.
  */
-declare var onfocus: ((this: Window, ev: FocusEvent) => any) | null;
-declare var ongotpointercapture: ((this: Window, ev: PointerEvent) => any) | null;
-declare var oninput: ((this: Window, ev: Event) => any) | null;
-declare var oninvalid: ((this: Window, ev: Event) => any) | null;
+declare var onfocus: ((this: DomWindow, ev: FocusEvent) => any) | null;
+declare var ongotpointercapture: ((this: DomWindow, ev: PointerEvent) => any) | null;
+declare var oninput: ((this: DomWindow, ev: Event) => any) | null;
+declare var oninvalid: ((this: DomWindow, ev: Event) => any) | null;
 /**
  * Fires when the user presses a key.
  * @param ev The keyboard event
  */
-declare var onkeydown: ((this: Window, ev: KeyboardEvent) => any) | null;
+declare var onkeydown: ((this: DomWindow, ev: KeyboardEvent) => any) | null;
 /**
  * Fires when the user presses an alphanumeric key.
  * @param ev The event.
  */
-declare var onkeypress: ((this: Window, ev: KeyboardEvent) => any) | null;
+declare var onkeypress: ((this: DomWindow, ev: KeyboardEvent) => any) | null;
 /**
  * Fires when the user releases a key.
  * @param ev The keyboard event
  */
-declare var onkeyup: ((this: Window, ev: KeyboardEvent) => any) | null;
+declare var onkeyup: ((this: DomWindow, ev: KeyboardEvent) => any) | null;
 /**
  * Fires immediately after the browser loads the object.
  * @param ev The event.
  */
-declare var onload: ((this: Window, ev: Event) => any) | null;
+declare var onload: ((this: DomWindow, ev: Event) => any) | null;
 /**
  * Occurs when media data is loaded at the current playback position.
  * @param ev The event.
  */
-declare var onloadeddata: ((this: Window, ev: Event) => any) | null;
+declare var onloadeddata: ((this: DomWindow, ev: Event) => any) | null;
 /**
  * Occurs when the duration and dimensions of the media have been determined.
  * @param ev The event.
  */
-declare var onloadedmetadata: ((this: Window, ev: Event) => any) | null;
+declare var onloadedmetadata: ((this: DomWindow, ev: Event) => any) | null;
 /**
  * Occurs when Internet Explorer begins looking for media data.
  * @param ev The event.
  */
-declare var onloadstart: ((this: Window, ev: Event) => any) | null;
-declare var onlostpointercapture: ((this: Window, ev: PointerEvent) => any) | null;
+declare var onloadstart: ((this: DomWindow, ev: Event) => any) | null;
+declare var onlostpointercapture: ((this: DomWindow, ev: PointerEvent) => any) | null;
 /**
  * Fires when the user clicks the object with either mouse button.
  * @param ev The mouse event.
  */
-declare var onmousedown: ((this: Window, ev: MouseEvent) => any) | null;
-declare var onmouseenter: ((this: Window, ev: MouseEvent) => any) | null;
-declare var onmouseleave: ((this: Window, ev: MouseEvent) => any) | null;
+declare var onmousedown: ((this: DomWindow, ev: MouseEvent) => any) | null;
+declare var onmouseenter: ((this: DomWindow, ev: MouseEvent) => any) | null;
+declare var onmouseleave: ((this: DomWindow, ev: MouseEvent) => any) | null;
 /**
  * Fires when the user moves the mouse over the object.
  * @param ev The mouse event.
  */
-declare var onmousemove: ((this: Window, ev: MouseEvent) => any) | null;
+declare var onmousemove: ((this: DomWindow, ev: MouseEvent) => any) | null;
 /**
  * Fires when the user moves the mouse pointer outside the boundaries of the object.
  * @param ev The mouse event.
  */
-declare var onmouseout: ((this: Window, ev: MouseEvent) => any) | null;
+declare var onmouseout: ((this: DomWindow, ev: MouseEvent) => any) | null;
 /**
  * Fires when the user moves the mouse pointer into the object.
  * @param ev The mouse event.
  */
-declare var onmouseover: ((this: Window, ev: MouseEvent) => any) | null;
+declare var onmouseover: ((this: DomWindow, ev: MouseEvent) => any) | null;
 /**
  * Fires when the user releases a mouse button while the mouse is over the object.
  * @param ev The mouse event.
  */
-declare var onmouseup: ((this: Window, ev: MouseEvent) => any) | null;
+declare var onmouseup: ((this: DomWindow, ev: MouseEvent) => any) | null;
 /**
  * Occurs when playback is paused.
  * @param ev The event.
  */
-declare var onpause: ((this: Window, ev: Event) => any) | null;
+declare var onpause: ((this: DomWindow, ev: Event) => any) | null;
 /**
  * Occurs when the play method is requested.
  * @param ev The event.
  */
-declare var onplay: ((this: Window, ev: Event) => any) | null;
+declare var onplay: ((this: DomWindow, ev: Event) => any) | null;
 /**
  * Occurs when the audio or video has started playing.
  * @param ev The event.
  */
-declare var onplaying: ((this: Window, ev: Event) => any) | null;
-declare var onpointercancel: ((this: Window, ev: PointerEvent) => any) | null;
-declare var onpointerdown: ((this: Window, ev: PointerEvent) => any) | null;
-declare var onpointerenter: ((this: Window, ev: PointerEvent) => any) | null;
-declare var onpointerleave: ((this: Window, ev: PointerEvent) => any) | null;
-declare var onpointermove: ((this: Window, ev: PointerEvent) => any) | null;
-declare var onpointerout: ((this: Window, ev: PointerEvent) => any) | null;
-declare var onpointerover: ((this: Window, ev: PointerEvent) => any) | null;
-declare var onpointerup: ((this: Window, ev: PointerEvent) => any) | null;
+declare var onplaying: ((this: DomWindow, ev: Event) => any) | null;
+declare var onpointercancel: ((this: DomWindow, ev: PointerEvent) => any) | null;
+declare var onpointerdown: ((this: DomWindow, ev: PointerEvent) => any) | null;
+declare var onpointerenter: ((this: DomWindow, ev: PointerEvent) => any) | null;
+declare var onpointerleave: ((this: DomWindow, ev: PointerEvent) => any) | null;
+declare var onpointermove: ((this: DomWindow, ev: PointerEvent) => any) | null;
+declare var onpointerout: ((this: DomWindow, ev: PointerEvent) => any) | null;
+declare var onpointerover: ((this: DomWindow, ev: PointerEvent) => any) | null;
+declare var onpointerup: ((this: DomWindow, ev: PointerEvent) => any) | null;
 /**
  * Occurs to indicate progress while downloading media data.
  * @param ev The event.
  */
-declare var onprogress: ((this: Window, ev: ProgressEvent) => any) | null;
+declare var onprogress: ((this: DomWindow, ev: ProgressEvent) => any) | null;
 /**
  * Occurs when the playback rate is increased or decreased.
  * @param ev The event.
  */
-declare var onratechange: ((this: Window, ev: Event) => any) | null;
+declare var onratechange: ((this: DomWindow, ev: Event) => any) | null;
 /**
  * Fires when the user resets a form.
  * @param ev The event.
  */
-declare var onreset: ((this: Window, ev: Event) => any) | null;
-declare var onresize: ((this: Window, ev: UIEvent) => any) | null;
+declare var onreset: ((this: DomWindow, ev: Event) => any) | null;
+declare var onresize: ((this: DomWindow, ev: UIEvent) => any) | null;
 /**
  * Fires when the user repositions the scroll box in the scroll bar on the object.
  * @param ev The event.
  */
-declare var onscroll: ((this: Window, ev: Event) => any) | null;
-declare var onsecuritypolicyviolation: ((this: Window, ev: SecurityPolicyViolationEvent) => any) | null;
+declare var onscroll: ((this: DomWindow, ev: Event) => any) | null;
+declare var onsecuritypolicyviolation: ((this: DomWindow, ev: SecurityPolicyViolationEvent) => any) | null;
 /**
  * Occurs when the seek operation ends.
  * @param ev The event.
  */
-declare var onseeked: ((this: Window, ev: Event) => any) | null;
+declare var onseeked: ((this: DomWindow, ev: Event) => any) | null;
 /**
  * Occurs when the current playback position is moved.
  * @param ev The event.
  */
-declare var onseeking: ((this: Window, ev: Event) => any) | null;
+declare var onseeking: ((this: DomWindow, ev: Event) => any) | null;
 /**
  * Fires when the current selection changes.
  * @param ev The event.
  */
-declare var onselect: ((this: Window, ev: Event) => any) | null;
-declare var onselectionchange: ((this: Window, ev: Event) => any) | null;
-declare var onselectstart: ((this: Window, ev: Event) => any) | null;
+declare var onselect: ((this: DomWindow, ev: Event) => any) | null;
+declare var onselectionchange: ((this: DomWindow, ev: Event) => any) | null;
+declare var onselectstart: ((this: DomWindow, ev: Event) => any) | null;
 /**
  * Occurs when the download has stopped.
  * @param ev The event.
  */
-declare var onstalled: ((this: Window, ev: Event) => any) | null;
-declare var onsubmit: ((this: Window, ev: Event) => any) | null;
+declare var onstalled: ((this: DomWindow, ev: Event) => any) | null;
+declare var onsubmit: ((this: DomWindow, ev: Event) => any) | null;
 /**
  * Occurs if the load operation has been intentionally halted.
  * @param ev The event.
  */
-declare var onsuspend: ((this: Window, ev: Event) => any) | null;
+declare var onsuspend: ((this: DomWindow, ev: Event) => any) | null;
 /**
  * Occurs to indicate the current playback position.
  * @param ev The event.
  */
-declare var ontimeupdate: ((this: Window, ev: Event) => any) | null;
-declare var ontoggle: ((this: Window, ev: Event) => any) | null;
-declare var ontouchcancel: ((this: Window, ev: TouchEvent) => any) | null | undefined;
-declare var ontouchend: ((this: Window, ev: TouchEvent) => any) | null | undefined;
-declare var ontouchmove: ((this: Window, ev: TouchEvent) => any) | null | undefined;
-declare var ontouchstart: ((this: Window, ev: TouchEvent) => any) | null | undefined;
-declare var ontransitioncancel: ((this: Window, ev: TransitionEvent) => any) | null;
-declare var ontransitionend: ((this: Window, ev: TransitionEvent) => any) | null;
-declare var ontransitionrun: ((this: Window, ev: TransitionEvent) => any) | null;
-declare var ontransitionstart: ((this: Window, ev: TransitionEvent) => any) | null;
+declare var ontimeupdate: ((this: DomWindow, ev: Event) => any) | null;
+declare var ontoggle: ((this: DomWindow, ev: Event) => any) | null;
+declare var ontouchcancel: ((this: DomWindow, ev: TouchEvent) => any) | null | undefined;
+declare var ontouchend: ((this: DomWindow, ev: TouchEvent) => any) | null | undefined;
+declare var ontouchmove: ((this: DomWindow, ev: TouchEvent) => any) | null | undefined;
+declare var ontouchstart: ((this: DomWindow, ev: TouchEvent) => any) | null | undefined;
+declare var ontransitioncancel: ((this: DomWindow, ev: TransitionEvent) => any) | null;
+declare var ontransitionend: ((this: DomWindow, ev: TransitionEvent) => any) | null;
+declare var ontransitionrun: ((this: DomWindow, ev: TransitionEvent) => any) | null;
+declare var ontransitionstart: ((this: DomWindow, ev: TransitionEvent) => any) | null;
 /**
  * Occurs when the volume is changed, or playback is muted or unmuted.
  * @param ev The event.
  */
-declare var onvolumechange: ((this: Window, ev: Event) => any) | null;
+declare var onvolumechange: ((this: DomWindow, ev: Event) => any) | null;
 /**
  * Occurs when playback stops because the next frame of a video resource is not available.
  * @param ev The event.
  */
-declare var onwaiting: ((this: Window, ev: Event) => any) | null;
-declare var onwheel: ((this: Window, ev: WheelEvent) => any) | null;
+declare var onwaiting: ((this: DomWindow, ev: Event) => any) | null;
+declare var onwheel: ((this: DomWindow, ev: WheelEvent) => any) | null;
 declare function cancelAnimationFrame(handle: number): void;
 declare function requestAnimationFrame(callback: FrameRequestCallback): number;
 declare var caches: CacheStorage;
@@ -20005,25 +20005,25 @@ declare function fetch(input: RequestInfo, init?: RequestInit): Promise<Response
 declare function queueMicrotask(callback: VoidFunction): void;
 declare function setInterval(handler: TimerHandler, timeout?: number, ...arguments: any[]): number;
 declare function setTimeout(handler: TimerHandler, timeout?: number, ...arguments: any[]): number;
-declare var onafterprint: ((this: Window, ev: Event) => any) | null;
-declare var onbeforeprint: ((this: Window, ev: Event) => any) | null;
-declare var onbeforeunload: ((this: Window, ev: BeforeUnloadEvent) => any) | null;
-declare var onhashchange: ((this: Window, ev: HashChangeEvent) => any) | null;
-declare var onlanguagechange: ((this: Window, ev: Event) => any) | null;
-declare var onmessage: ((this: Window, ev: MessageEvent) => any) | null;
-declare var onmessageerror: ((this: Window, ev: MessageEvent) => any) | null;
-declare var onoffline: ((this: Window, ev: Event) => any) | null;
-declare var ononline: ((this: Window, ev: Event) => any) | null;
-declare var onpagehide: ((this: Window, ev: PageTransitionEvent) => any) | null;
-declare var onpageshow: ((this: Window, ev: PageTransitionEvent) => any) | null;
-declare var onpopstate: ((this: Window, ev: PopStateEvent) => any) | null;
-declare var onrejectionhandled: ((this: Window, ev: PromiseRejectionEvent) => any) | null;
-declare var onstorage: ((this: Window, ev: StorageEvent) => any) | null;
-declare var onunhandledrejection: ((this: Window, ev: PromiseRejectionEvent) => any) | null;
-declare var onunload: ((this: Window, ev: Event) => any) | null;
-declare function addEventListener<K extends keyof WindowEventMap>(type: K, listener: (this: Window, ev: WindowEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
+declare var onafterprint: ((this: DomWindow, ev: Event) => any) | null;
+declare var onbeforeprint: ((this: DomWindow, ev: Event) => any) | null;
+declare var onbeforeunload: ((this: DomWindow, ev: BeforeUnloadEvent) => any) | null;
+declare var onhashchange: ((this: DomWindow, ev: HashChangeEvent) => any) | null;
+declare var onlanguagechange: ((this: DomWindow, ev: Event) => any) | null;
+declare var onmessage: ((this: DomWindow, ev: MessageEvent) => any) | null;
+declare var onmessageerror: ((this: DomWindow, ev: MessageEvent) => any) | null;
+declare var onoffline: ((this: DomWindow, ev: Event) => any) | null;
+declare var ononline: ((this: DomWindow, ev: Event) => any) | null;
+declare var onpagehide: ((this: DomWindow, ev: PageTransitionEvent) => any) | null;
+declare var onpageshow: ((this: DomWindow, ev: PageTransitionEvent) => any) | null;
+declare var onpopstate: ((this: DomWindow, ev: PopStateEvent) => any) | null;
+declare var onrejectionhandled: ((this: DomWindow, ev: PromiseRejectionEvent) => any) | null;
+declare var onstorage: ((this: DomWindow, ev: StorageEvent) => any) | null;
+declare var onunhandledrejection: ((this: DomWindow, ev: PromiseRejectionEvent) => any) | null;
+declare var onunload: ((this: DomWindow, ev: Event) => any) | null;
+declare function addEventListener<K extends keyof WindowEventMap>(type: K, listener: (this: DomWindow, ev: WindowEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
 declare function addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
-declare function removeEventListener<K extends keyof WindowEventMap>(type: K, listener: (this: Window, ev: WindowEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
+declare function removeEventListener<K extends keyof WindowEventMap>(type: K, listener: (this: DomWindow, ev: WindowEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
 declare function removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
 type HeadersInit = Headers | string[][] | Record<string, string>;
 type BodyInit = Blob | BufferSource | FormData | URLSearchParams | ReadableStream<Uint8Array> | string;
@@ -20085,7 +20085,7 @@ type RTCIceGatherCandidate = RTCIceCandidateDictionary | RTCIceCandidateComplete
 type RTCTransport = RTCDtlsTransport | RTCSrtpSdesTransport;
 /** @deprecated */
 type MouseWheelEvent = WheelEvent;
-type WindowProxy = Window;
+type WindowProxy = DomWindow;
 type ReadableStreamDefaultReadResult<T> = ReadableStreamDefaultReadValueResult<T> | ReadableStreamDefaultReadDoneResult;
 type AlignSetting = "center" | "end" | "left" | "right" | "start";
 type AnimationPlayState = "finished" | "idle" | "paused" | "running";
